---
const { pregunta, opciones, id } = Astro.props;
import ResponseBox from './ResponseBox.astro';
---
<div id={id} class="relative mb-10 ml-10 flex flex-col justify-between border-4 text-xl font-pixelify rounded-xl p-7 bg-[#FAF9D9] border-orange-500 w-3/5 h-56">
  <div class="mt-3" id={`typing-text-${id}`}>
  </div>
  <button id={`aceptar-${id}`} class="w-36 self-end bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded">
    aceptar
  </button>

  <div class="absolute top-[-20px] flex gap-3">
    {opciones.map((opcion) => (
       <ResponseBox opcion={`${opcion.letra}`} texto={`${opcion.texto}`} />
      ))}
  </div>
  
</div>

<script is:inline define:vars={{ pregunta, id }}>
  document.addEventListener('DOMContentLoaded', () => {
    const text = pregunta;
    const typingSpeed = 35; 
    let i = 0;
    function typeWriter() {
      const typingElement = document.getElementById(`typing-text-${id}`);
      typingElement.innerHTML = ''; // Limpiar el contenido antes de escribir
      i = 0; // Reiniciar el contador
      function type() {
        if (i < text.length) {
          typingElement.innerHTML += text.charAt(i);
          i++;
          setTimeout(type, typingSpeed);
        }
      }
      type();
    }
    typeWriter();
   // Función para detectar si el elemento está visible usando IntersectionObserver
   const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          typeWriter(); // Iniciar el efecto de escritura cuando el elemento es visible
        }
      });
    });


    // Observar el elemento con id
    const dialogElement = document.getElementById(id);
    observer.observe(dialogElement);

    // Escuchar el evento de selección de opción
    document.addEventListener('optionSelected', (event) => {
      const selectedOption = event.detail.opcion;
      const aceptarButton = document.getElementById(`aceptar-${id}`);
      
      aceptarButton.onclick = () => {
        // Ocultar el diálogo actual
        document.getElementById(id).remove();
        
        // Emitir un evento para mostrar el siguiente diálogo
        const nextDialogEvent = new CustomEvent('showNextDialog', { detail: { selectedOption } });
        document.dispatchEvent(nextDialogEvent);
      };
    });
  });
</script>
